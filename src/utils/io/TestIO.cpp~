#include "IO.h"
#include <iostream>
#include <fstream>

//读取当前目录下有多少文件
void test1() {

	char basePath[1024] = {0};
	/*
		char *getcwd(char *buf,size_t size);
		getcwd()会将当前工作目录的绝对路径复制到参数buffer所指的内存空间中,参数size为buf的空间大小
	*/
    getcwd(basePath, sizeof(basePath) - 1);
    printf("the current dir is : %s\n",basePath);

    readFileList(basePath);
}

/*
C++通过以下几个类支持文件的输入输出
ofstream:写操作(输出)的文件类
ifstream:读操作(输入)的文件类
fstream:可同时读写的文件类

1.打开文件
对于这些类的一个对象所做的第一个操作通常就是将它和一个真正的文件联系起来,也就是打开一个文件。被打开的文件在程序中由一个流对象(stream object)来表示,
而对于这个流对象所做的任何输入输出操作实际就是对该文件所做的操作

原型:
void open (const char * filename, openmode mode);

参数:
filename:是一个字符串,代表要打开的文件名
mode:是以下标志符的一个组合:
ios::in:为输入而打开文件
ios::out:为输出而打开文件
ios::ate:初始位置,文件尾
ios::app:所输出附加在文件末尾
ios::trunc:如果文件已存在则先删除该文件
ios::binary:二进制流

2.检查文件是否被正确打开
原型:
bool is_open();

参数:
返回一个布尔值,为true代表已经被顺利打开,false则相反

3.关闭文件

当文件读写操作完成之后,我们必须将文件关闭以使文件重新变为可访问的。关闭文件需要调用成员函数close,他将负责将
缓存中的数据排放出来并关闭文件。这个函数一旦被调用,原先的流对象就可以被用来打开其他文件了,这个文件也就可以重新
被其他进程所拥有
原型:
void close ();
*/

//C++下文件的打开关闭操作
void test2() {

//第一种方式
	//如果文件不存在,也不会创建
	//std::fstream t("open.txt",std::ios::in | std::ios::out); //直接定义了一个流对象,该流对象可读、可写,并且打开了一个文件。可以查看源码,std::fstream里面的构造函数mode类型ios::in | ios::out
	
	//如果文件不存在,会创建
	std::ofstream t("open.txt"); //输出流,通过配置一样可以从里面读取数据

	//std::ifstream t("open.txt",std::ios::in | std::ios::out); //输入流，通过配置一样可以往里面输入数据
//第二种方式
#if 0
	std::fstream t;
	t.open("open.txt");
#endif

	if(t.is_open()) {
		std::cout << "文件被正确打开了" << std::endl;	
	}
	else {
		std::cout << "打开文件出错了" << std::endl;
		return;
	}

	t.close();
}

//C++下文件的写操作
void test3() {

	std::ofstream t("open.txt"); //输出流,通过配置一样可以从里面读取数据

	std::string s = "zhaokun";

//第一种写入的方式，采用操作符 <<
	t << s << std::endl;

//第二种写入的方式，使用write函数

	t.write(s.c_str(),s.length());
	t.close();
}

//C++下文件读操作
void test4() {

	std::ifstream t("open.txt");
	
//第一种方式:这种方式只能读取一行数据
#if 0
	std::string s;

	t >> s;
	std::cout << s << std::endl;
	t >> s;
	std::cout << s << std::endl;
#endif

//第二种方式
#if 0
	char buf[1024];

	//数据缓冲区,读取的字节数,如果读取的字节大于文件的字节数,则会后面会读到乱码
	t.read(buf,sizeof(buf));

	std::cout << buf << std::endl;
#endif

//读取一行数据

#if 0	
	std::string s;
	std::getline(t,s);

	std::cout << s << std::endl;
#endif

//读取文本全部数据
#if 0
	int i = 0;
	while(!t.eof()) { //判断是否读取数据到文件最后
		std::cout << ++i << std::endl;
		std::string s;
		std::getline(t,s);
		std::cout << s << std::endl;
	}
#endif


	t.close();
}

/*

文件定位:
和C的文件操作不同的是,C++ i/o系统管理两个与一个文件相联系的指针。一个读指针,他说明输入操作在文件中的位置；另一个是写操作,它下次写操作的位置。每次
执行输入或输出时,相应的指针自动变化,所以，C++的文件定位分为读位置和写位置的定位，对应于成员函数是seekg()和seekp(),seekg()是设置读位置,seekp()是设置写位置

istream &seekg(streamoff offset,seek_dir origin);
ostream &seekp(streamoff offset,seek_dir origin);

streamoff定义于 iostream.h 中，定义有偏移量 offset 所能取得的最大值，seek_dir 表示移动的基准位置，是一个有以下值的枚举：

ios::beg： 文件开头 
ios::cur： 文件当前位置 
ios::end： 文件结尾 

file1.seekg(1234,ios::cur);//把文件的读指针从当前位置向后移1234个字节
file2.seekp(1234,ios::beg);//把文件的写指针从文件开头向后移1234个字节

*/

//可以同时对同一个文件建立写操作和读操作
void test5() {

	std::ofstream w("open.txt"); //输出流,通过配置一样可以从里面读取数据

	std::string s1 = "zhaokun";

	w << s1 << std::endl;

	std::ifstream r("open.txt");

	std::string s2;

	r >> s2;

	std::cout << s2 << std::endl;

	w.close();
	r.close();
}

void test6() {

	bool ret = isFileExist("/home/zhaokun/utils/utils_cplusplus/src/utils/io/IO.cpp");

	if(true == ret) {
		printf("文件存在\n");
	}
	else {
		printf("文件不存在\n");
	}

	ret = isFileExist("/home/zhaokun/utils/utils_cplusplus/src/utils/io/IO1.cpp");

	if(true == ret) {
		printf("文件存在\n");
	}
	else {
		printf("文件不存在\n");
	}	

}

void test7() {

	bool ret = isDirExist("/home/zhaokun/utils/utils_cplusplus/src/utils/io");

	if(true == ret) {
		printf("目录存在\n");
	}
	else {
		printf("目录不存在\n");
	}

	ret = isDirExist("/home/zhaokun/utils/utils_cplusplus/src/utils/io");

	if(true == ret) {
		printf("目录存在\n");
	}
	else {
		printf("目录不存在\n");
	}

}

int main() {

//	test2();
//	test3();
//	test4();
//	test5();

//	test6();
	test7();
	return 0;
}

