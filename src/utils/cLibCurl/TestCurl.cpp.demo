#include "CLibCurl.h"

//libcurl在多线程环境下的使用
#define USE_OPENSSL 
       
#include <stdio.h> 
#include <pthread.h> 
#include <curl/curl.h> 
       
static pthread_mutex_t *lockarray; 
       
#ifdef USE_OPENSSL 
#include <openssl/crypto.h> 

static void lock_callback(int mode, int type, const char *file, int line) {

	(void)file; 
 	(void)line; 
  	if(mode & CRYPTO_LOCK) { 
    	pthread_mutex_lock(&(lockarray[type])); 
  	} 
  	else { 
    	pthread_mutex_unlock(&(lockarray[type])); 
  	} 
} 
       
static unsigned long thread_id(void) {

	  unsigned long ret; 
	   
	  ret=(unsigned long)pthread_self(); 
	  return(ret); 
} 
       
static void init_locks(void) {

  int i; 
   
  lockarray=(pthread_mutex_t *)OPENSSL_malloc(CRYPTO_num_locks() *  sizeof(pthread_mutex_t));
  
  for (i=0; i<CRYPTO_num_locks(); i++) { 
    pthread_mutex_init(&(lockarray[i]),NULL); 
  } 
   
  CRYPTO_set_id_callback(thread_id); 
  CRYPTO_set_locking_callback(lock_callback); 
} 
       
static void kill_locks(void) {

  int i; 
   
  CRYPTO_set_locking_callback(NULL); 
  for (i=0; i<CRYPTO_num_locks(); i++) 
    pthread_mutex_destroy(&(lockarray[i])); 
   
  OPENSSL_free(lockarray); 
} 
#endif 
       
int main() {

	init_locks();
	//创建线程执行
	kill_locks();
	return 0;
}
